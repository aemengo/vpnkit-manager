// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TextParcel struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextParcel) Reset()         { *m = TextParcel{} }
func (m *TextParcel) String() string { return proto.CompactTextString(m) }
func (*TextParcel) ProtoMessage()    {}
func (*TextParcel) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_c36236035b622a83, []int{0}
}
func (m *TextParcel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextParcel.Unmarshal(m, b)
}
func (m *TextParcel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextParcel.Marshal(b, m, deterministic)
}
func (dst *TextParcel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextParcel.Merge(dst, src)
}
func (m *TextParcel) XXX_Size() int {
	return xxx_messageInfo_TextParcel.Size(m)
}
func (m *TextParcel) XXX_DiscardUnknown() {
	xxx_messageInfo_TextParcel.DiscardUnknown(m)
}

var xxx_messageInfo_TextParcel proto.InternalMessageInfo

func (m *TextParcel) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ExposeAddressOpts struct {
	HostIP               string   `protobuf:"bytes,1,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	HostPort             string   `protobuf:"bytes,2,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	ContainerIP          string   `protobuf:"bytes,3,opt,name=containerIP,proto3" json:"containerIP,omitempty"`
	ContainerPort        string   `protobuf:"bytes,4,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExposeAddressOpts) Reset()         { *m = ExposeAddressOpts{} }
func (m *ExposeAddressOpts) String() string { return proto.CompactTextString(m) }
func (*ExposeAddressOpts) ProtoMessage()    {}
func (*ExposeAddressOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_c36236035b622a83, []int{1}
}
func (m *ExposeAddressOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExposeAddressOpts.Unmarshal(m, b)
}
func (m *ExposeAddressOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExposeAddressOpts.Marshal(b, m, deterministic)
}
func (dst *ExposeAddressOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExposeAddressOpts.Merge(dst, src)
}
func (m *ExposeAddressOpts) XXX_Size() int {
	return xxx_messageInfo_ExposeAddressOpts.Size(m)
}
func (m *ExposeAddressOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_ExposeAddressOpts.DiscardUnknown(m)
}

var xxx_messageInfo_ExposeAddressOpts proto.InternalMessageInfo

func (m *ExposeAddressOpts) GetHostIP() string {
	if m != nil {
		return m.HostIP
	}
	return ""
}

func (m *ExposeAddressOpts) GetHostPort() string {
	if m != nil {
		return m.HostPort
	}
	return ""
}

func (m *ExposeAddressOpts) GetContainerIP() string {
	if m != nil {
		return m.ContainerIP
	}
	return ""
}

func (m *ExposeAddressOpts) GetContainerPort() string {
	if m != nil {
		return m.ContainerPort
	}
	return ""
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_c36236035b622a83, []int{2}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TextParcel)(nil), "pb.TextParcel")
	proto.RegisterType((*ExposeAddressOpts)(nil), "pb.ExposeAddressOpts")
	proto.RegisterType((*Void)(nil), "pb.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VpnkitManagerClient is the client API for VpnkitManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VpnkitManagerClient interface {
	Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TextParcel, error)
	ExposeAddress(ctx context.Context, opts ...grpc.CallOption) (VpnkitManager_ExposeAddressClient, error)
	ListExposedAddresses(ctx context.Context, in *Void, opts ...grpc.CallOption) (VpnkitManager_ListExposedAddressesClient, error)
}

type vpnkitManagerClient struct {
	cc *grpc.ClientConn
}

func NewVpnkitManagerClient(cc *grpc.ClientConn) VpnkitManagerClient {
	return &vpnkitManagerClient{cc}
}

func (c *vpnkitManagerClient) Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TextParcel, error) {
	out := new(TextParcel)
	err := c.cc.Invoke(ctx, "/pb.VpnkitManager/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnkitManagerClient) ExposeAddress(ctx context.Context, opts ...grpc.CallOption) (VpnkitManager_ExposeAddressClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VpnkitManager_serviceDesc.Streams[0], "/pb.VpnkitManager/ExposeAddress", opts...)
	if err != nil {
		return nil, err
	}
	x := &vpnkitManagerExposeAddressClient{stream}
	return x, nil
}

type VpnkitManager_ExposeAddressClient interface {
	Send(*ExposeAddressOpts) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type vpnkitManagerExposeAddressClient struct {
	grpc.ClientStream
}

func (x *vpnkitManagerExposeAddressClient) Send(m *ExposeAddressOpts) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vpnkitManagerExposeAddressClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vpnkitManagerClient) ListExposedAddresses(ctx context.Context, in *Void, opts ...grpc.CallOption) (VpnkitManager_ListExposedAddressesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VpnkitManager_serviceDesc.Streams[1], "/pb.VpnkitManager/ListExposedAddresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &vpnkitManagerListExposedAddressesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VpnkitManager_ListExposedAddressesClient interface {
	Recv() (*ExposeAddressOpts, error)
	grpc.ClientStream
}

type vpnkitManagerListExposedAddressesClient struct {
	grpc.ClientStream
}

func (x *vpnkitManagerListExposedAddressesClient) Recv() (*ExposeAddressOpts, error) {
	m := new(ExposeAddressOpts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VpnkitManagerServer is the server API for VpnkitManager service.
type VpnkitManagerServer interface {
	Ping(context.Context, *Void) (*TextParcel, error)
	ExposeAddress(VpnkitManager_ExposeAddressServer) error
	ListExposedAddresses(*Void, VpnkitManager_ListExposedAddressesServer) error
}

func RegisterVpnkitManagerServer(s *grpc.Server, srv VpnkitManagerServer) {
	s.RegisterService(&_VpnkitManager_serviceDesc, srv)
}

func _VpnkitManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnkitManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VpnkitManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnkitManagerServer).Ping(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnkitManager_ExposeAddress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VpnkitManagerServer).ExposeAddress(&vpnkitManagerExposeAddressServer{stream})
}

type VpnkitManager_ExposeAddressServer interface {
	SendAndClose(*Void) error
	Recv() (*ExposeAddressOpts, error)
	grpc.ServerStream
}

type vpnkitManagerExposeAddressServer struct {
	grpc.ServerStream
}

func (x *vpnkitManagerExposeAddressServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vpnkitManagerExposeAddressServer) Recv() (*ExposeAddressOpts, error) {
	m := new(ExposeAddressOpts)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VpnkitManager_ListExposedAddresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VpnkitManagerServer).ListExposedAddresses(m, &vpnkitManagerListExposedAddressesServer{stream})
}

type VpnkitManager_ListExposedAddressesServer interface {
	Send(*ExposeAddressOpts) error
	grpc.ServerStream
}

type vpnkitManagerListExposedAddressesServer struct {
	grpc.ServerStream
}

func (x *vpnkitManagerListExposedAddressesServer) Send(m *ExposeAddressOpts) error {
	return x.ServerStream.SendMsg(m)
}

var _VpnkitManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VpnkitManager",
	HandlerType: (*VpnkitManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _VpnkitManager_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExposeAddress",
			Handler:       _VpnkitManager_ExposeAddress_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListExposedAddresses",
			Handler:       _VpnkitManager_ListExposedAddresses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages.proto",
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor_messages_c36236035b622a83) }

var fileDescriptor_messages_c36236035b622a83 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd9, 0x5a, 0x43, 0x1d, 0x49, 0xc1, 0xa1, 0x4a, 0xc8, 0x29, 0x04, 0x0f, 0x3d, 0x05,
	0xa9, 0x27, 0x8f, 0x1e, 0x3c, 0x14, 0x14, 0x17, 0x91, 0xde, 0x37, 0xcd, 0x10, 0x17, 0xeb, 0xee,
	0xb2, 0xb3, 0x4a, 0xdf, 0xc2, 0x57, 0xf0, 0x51, 0x25, 0xdb, 0x10, 0x52, 0xf4, 0x36, 0xdf, 0xcc,
	0xc7, 0xbf, 0xfc, 0x0b, 0xf3, 0x0f, 0x62, 0x56, 0x2d, 0x71, 0xe5, 0xbc, 0x0d, 0x16, 0x27, 0xae,
	0x2e, 0x4b, 0x80, 0x57, 0xda, 0x07, 0xa9, 0xfc, 0x96, 0x76, 0xb8, 0x80, 0xd3, 0x2f, 0xb5, 0xfb,
	0xa4, 0x4c, 0x14, 0x62, 0x79, 0xf6, 0x72, 0x80, 0xf2, 0x5b, 0xc0, 0xc5, 0xc3, 0xde, 0x59, 0xa6,
	0xfb, 0xa6, 0xf1, 0xc4, 0xfc, 0xec, 0x02, 0xe3, 0x15, 0x24, 0x6f, 0x96, 0xc3, 0x5a, 0xf6, 0x72,
	0x4f, 0x98, 0xc3, 0xac, 0x9b, 0xa4, 0xf5, 0x21, 0x9b, 0xc4, 0xcb, 0xc0, 0x58, 0xc0, 0xf9, 0xd6,
	0x9a, 0xa0, 0xb4, 0x21, 0xbf, 0x96, 0xd9, 0x49, 0x3c, 0x8f, 0x57, 0x78, 0x0d, 0xe9, 0x80, 0x31,
	0x62, 0x1a, 0x9d, 0xe3, 0x65, 0x99, 0xc0, 0x74, 0x63, 0x75, 0xb3, 0xfa, 0x11, 0x90, 0x6e, 0x9c,
	0x79, 0xd7, 0xe1, 0x49, 0x19, 0xd5, 0x92, 0xc7, 0x02, 0xa6, 0x52, 0x9b, 0x16, 0x67, 0x95, 0xab,
	0xab, 0xce, 0xc9, 0xe7, 0xdd, 0x34, 0xea, 0xb8, 0x82, 0xf4, 0xa8, 0x0c, 0x5e, 0x76, 0xc2, 0x9f,
	0x7e, 0xf9, 0x90, 0xb0, 0x14, 0x78, 0x07, 0x8b, 0x47, 0xcd, 0xe1, 0x20, 0x35, 0xbd, 0x45, 0x3c,
	0x7a, 0xe5, 0xff, 0x90, 0x1b, 0x51, 0x27, 0xf1, 0xaf, 0x6f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x82, 0xe3, 0xd7, 0xce, 0x7d, 0x01, 0x00, 0x00,
}
